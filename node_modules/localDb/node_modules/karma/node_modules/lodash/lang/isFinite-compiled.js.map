{"version":3,"sources":["isFinite.js"],"names":[],"mappings":";;AAAA,IAAI,SAAS,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;;;AAGjD,IAAI,cAAc,GAAG,MAAM,CAAC,QAAQ;IAChC,iBAAiB,GAAG,SAAS,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BtD,IAAI,QAAQ,GAAG,iBAAiB,IAAI,UAAS,KAAK,EAAE;AAClD,SAAO,OAAO,KAAK,IAAI,QAAQ,IAAI,cAAc,CAAC,KAAK,CAAC,CAAC;CAC1D,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC","file":"isFinite-compiled.js","sourcesContent":["var getNative = require('../internal/getNative');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = global.isFinite,\n    nativeNumIsFinite = getNative(Number, 'isFinite');\n\n/**\n * Checks if `value` is a finite primitive number.\n *\n * **Note:** This method is based on [`Number.isFinite`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isfinite).\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n * @example\n *\n * _.isFinite(10);\n * // => true\n *\n * _.isFinite('10');\n * // => false\n *\n * _.isFinite(true);\n * // => false\n *\n * _.isFinite(Object(10));\n * // => false\n *\n * _.isFinite(Infinity);\n * // => false\n */\nvar isFinite = nativeNumIsFinite || function(value) {\n  return typeof value == 'number' && nativeIsFinite(value);\n};\n\nmodule.exports = isFinite;\n"]}