{"version":3,"sources":["isPlainObject.js"],"names":[],"mappings":";;AAAA,IAAI,SAAS,GAAG,OAAO,CAAC,uBAAuB,CAAC;IAC5C,iBAAiB,GAAG,OAAO,CAAC,+BAA+B,CAAC,CAAC;;;AAGjE,IAAI,SAAS,GAAG,iBAAiB,CAAC;;;AAGlC,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC;;;;;;AAMnC,IAAI,WAAW,GAAG,WAAW,CAAC,QAAQ,CAAC;;;AAGvC,IAAI,cAAc,GAAG,SAAS,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCzD,IAAI,aAAa,GAAG,CAAC,cAAc,GAAG,iBAAiB,GAAG,UAAS,KAAK,EAAE;AACxE,QAAI,EAAE,KAAK,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,SAAS,CAAA,AAAC,EAAE;AACpD,eAAO,KAAK,CAAC;KACd;AACD,QAAI,OAAO,GAAG,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC;QACrC,QAAQ,GAAG,OAAO,KAAK,QAAQ,GAAG,cAAc,CAAC,OAAO,CAAC,CAAA,AAAC,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC;;AAE3F,WAAO,QAAQ,GACV,KAAK,IAAI,QAAQ,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,QAAQ,GACvD,iBAAiB,CAAC,KAAK,CAAC,CAAC;CAC9B,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,aAAa,CAAC","file":"isPlainObject-compiled.js","sourcesContent":["var getNative = require('../internal/getNative'),\n    shimIsPlainObject = require('../internal/shimIsPlainObject');\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/** Native method references. */\nvar getPrototypeOf = getNative(Object, 'getPrototypeOf');\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * **Note:** This method assumes objects created by the `Object` constructor\n * have no inherited enumerable properties.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nvar isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {\n  if (!(value && objToString.call(value) == objectTag)) {\n    return false;\n  }\n  var valueOf = getNative(value, 'valueOf'),\n      objProto = valueOf && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);\n\n  return objProto\n    ? (value == objProto || getPrototypeOf(value) == objProto)\n    : shimIsPlainObject(value);\n};\n\nmodule.exports = isPlainObject;\n"]}