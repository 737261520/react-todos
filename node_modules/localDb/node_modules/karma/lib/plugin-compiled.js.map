{"version":3,"sources":["plugin.js"],"names":[],"mappings":";;AAAA,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE3B,IAAI,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACjC,IAAI,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;;AAG/C,IAAI,gBAAgB,GAAG,CAAC,WAAW,EAAE,yBAAyB,CAAC,CAAC;;AAEhE,OAAO,CAAC,OAAO,GAAG,UAAS,OAAO,EAAE;AAClC,MAAI,OAAO,GAAG,EAAE,CAAC;;AAEjB,MAAI,aAAa,GAAG,SAAhB,aAAa,CAAY,IAAI,EAAE;AACjC,OAAG,CAAC,KAAK,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;AACtC,QAAI;AACF,aAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;KAC7B,CAAC,OAAO,CAAC,EAAE;AACV,UAAI,CAAC,CAAC,IAAI,KAAK,kBAAkB,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AACnE,WAAG,CAAC,IAAI,CAAC,8DAA8D,GAC9D,6BAA6B,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;OACrD,MAAM;AACL,WAAG,CAAC,IAAI,CAAC,yCAAyC,EAAE,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;OACtE;KACF;GACF,CAAC;;AAEF,SAAO,CAAC,OAAO,CAAC,UAAS,MAAM,EAAE;AAC/B,QAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AAC3B,UAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AAC9B,YAAI,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAC;AAC3D,YAAI,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;;AAEzD,WAAG,CAAC,KAAK,CAAC,oBAAoB,EAAE,MAAM,EAAE,eAAe,CAAC,CAAC;AACzD,UAAE,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,UAAS,UAAU,EAAE;AAC1D,iBAAO,gBAAgB,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC/E,CAAC,CAAC,OAAO,CAAC,UAAS,UAAU,EAAE;AAC9B,uBAAa,CAAC,eAAe,GAAG,GAAG,GAAG,UAAU,CAAC,CAAC;SACnD,CAAC,CAAC;OACJ,MAAM;AACL,qBAAa,CAAC,MAAM,CAAC,CAAC;OACvB;KACF,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AAClC,SAAG,CAAC,KAAK,CAAC,uCAAuC,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACnF,aAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACtB,MAAM;AACL,SAAG,CAAC,IAAI,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;KACvC;GACF,CAAC,CAAC;;AAEH,SAAO,OAAO,CAAC;CAChB,CAAC","file":"plugin-compiled.js","sourcesContent":["var fs = require('fs');\nvar path = require('path');\n\nvar helper = require('./helper');\nvar log = require('./logger').create('plugin');\n\n\nvar IGNORED_PACKAGES = ['karma-cli', 'karma-runner.github.com'];\n\nexports.resolve = function(plugins) {\n  var modules = [];\n\n  var requirePlugin = function(name) {\n    log.debug('Loading plugin %s.', name);\n    try {\n      modules.push(require(name));\n    } catch (e) {\n      if (e.code === 'MODULE_NOT_FOUND' && e.message.indexOf(name) !== -1) {\n        log.warn('Cannot find plugin \"%s\".\\n  Did you forget to install it ?\\n' +\n                 '  npm install %s --save-dev', name, name);\n      } else {\n        log.warn('Error during loading \"%s\" plugin:\\n  %s', name, e.message);\n      }\n    }\n  };\n\n  plugins.forEach(function(plugin) {\n    if (helper.isString(plugin)) {\n      if (plugin.indexOf('*') !== -1) {\n        var pluginDirectory = path.normalize(__dirname + '/../..');\n        var regexp = new RegExp('^' + plugin.replace('*', '.*'));\n\n        log.debug('Loading %s from %s', plugin, pluginDirectory);\n        fs.readdirSync(pluginDirectory).filter(function(pluginName) {\n          return IGNORED_PACKAGES.indexOf(pluginName) === -1 && regexp.test(pluginName);\n        }).forEach(function(pluginName) {\n          requirePlugin(pluginDirectory + '/' + pluginName);\n        });\n      } else {\n        requirePlugin(plugin);\n      }\n    } else if (helper.isObject(plugin)) {\n      log.debug('Loading inlined plugin (defining %s).', Object.keys(plugin).join(', '));\n      modules.push(plugin);\n    } else {\n      log.warn('Invalid plugin %s', plugin);\n    }\n  });\n\n  return modules;\n};\n"]}