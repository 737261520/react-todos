{"version":3,"sources":["logger.js"],"names":[],"mappings":";;;;;;;;AAOA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACjC,IAAI,QAAQ,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;;;AAGtC,IAAI,UAAU,GAAG,SAAb,UAAU,CAAY,IAAI,EAAE,KAAK,EAAE;AACrC,MAAI,CAAC,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AACrC,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;CAC7B,CAAC;AACF,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,UAAS,KAAK,EAAE;AACzD,YAAU,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,YAAW;AACvC,QAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;GAClD,CAAC;CACH,CAAC,CAAC;;;;;;;;;;;;;;AAcH,IAAI,KAAK,GAAG,SAAR,KAAK,CAAY,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE;;AAE7C,MAAI,OAAO,GAAG,MAAM,GAAG,QAAQ,CAAC,aAAa,GAAG,QAAQ,CAAC,gBAAgB,CAAC;;;AAG1E,WAAS,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,SAAS,GAAG,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;;AAElF,WAAS,GAAG,SAAS,CAAC,GAAG,CAAC,UAAS,QAAQ,EAAE;AAC3C,QAAI,QAAQ,CAAC,IAAI,KAAK,SAAS,EAAE;AAC/B,UAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE;AAC3E,gBAAQ,CAAC,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;OACnC;KACF;AACD,WAAO,QAAQ,CAAC;GACjB,CAAC,CAAC;;;AAGH,QAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;AAChC,QAAM,CAAC,SAAS,CAAC;AACf,aAAS,EAAE,SAAS;GACrB,CAAC,CAAC;CACJ,CAAC;;;;;;;AAOF,IAAI,MAAM,GAAG,SAAT,MAAM,CAAY,IAAI,EAAE,KAAK,EAAE;AACjC,MAAI,IAAI,KAAK,WAAW,EAAE;AACxB,WAAO,IAAI,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;GAC3C,MAAM;AACL,QAAI,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,IAAI,OAAO,CAAC,CAAC;AAC/C,QAAI,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;AAC3B,YAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KACxB;AACD,WAAO,MAAM,CAAC;GACf;CACF,CAAC;;;;AAKF,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AACxB,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC","file":"logger-compiled.js","sourcesContent":["// This is the **logger** module for *Karma*. It uses\n// [log4js](https://github.com/nomiddlename/log4js-node) to handle and\n// configure all logging that happens inside of *Karma*.\n\n\n// ### Helpers and Setup\n\nvar log4js = require('log4js');\nvar helper = require('./helper');\nvar constant = require('./constants');\n\n// Special Wrapper for Socket.io :(\nvar LogWrapper = function(name, level) {\n  this.logger = log4js.getLogger(name);\n  this.logger.setLevel(level);\n};\n['error', 'warn', 'info', 'debug'].forEach(function(level) {\n  LogWrapper.prototype[level] = function() {\n    this.logger[level].apply(this.logger, arguments);\n  };\n});\n\n// #### Public Functions\n\n// Setup the logger by passing in the configuration options. It needs\n// three argumentes:\n//\n//     setup(logLevel, colors, appenders)\n//\n// * `logLevel`: *String* Defines the global log level.\n// * `colors`: *Boolean* Use colors in the stdout or not.\n// * `appenders`: *Array* This will be passed as appenders to log4js\n//   to allow for fine grained configuration of log4js. For more information\n//   see https://github.com/nomiddlename/log4js-node.\nvar setup = function(level, colors, appenders) {\n  // Turn color on/off on the console appenders with pattern layout\n  var pattern = colors ? constant.COLOR_PATTERN : constant.NO_COLOR_PATTERN;\n\n  // If there are no appenders use the default one\n  appenders = helper.isDefined(appenders) ? appenders : [constant.CONSOLE_APPENDER];\n\n  appenders = appenders.map(function(appender) {\n    if (appender.type === 'console') {\n      if (helper.isDefined(appender.layout) && appender.layout.type === 'pattern') {\n        appender.layout.pattern = pattern;\n      }\n    }\n    return appender;\n  });\n\n  // Pass the values to log4js\n  log4js.setGlobalLogLevel(level);\n  log4js.configure({\n    appenders: appenders\n  });\n};\n\n// Create a new logger. There are two optional arguments\n// * `name`, which defaults to `karma` and\n//   If the `name = 'socket.io'` this will create a special wrapper\n//   to be used as a logger for socket.io.\n// * `level`, which defaults to the global level.\nvar create = function(name, level) {\n  if (name === 'socket.io') {\n    return new LogWrapper('socket.io', level);\n  } else {\n    var logger = log4js.getLogger(name || 'karma');\n    if (helper.isDefined(level)) {\n      logger.setLevel(level);\n    }\n    return logger;\n  }\n};\n\n\n// #### Publish\n\nexports.create = create;\nexports.setup = setup;\n"]}