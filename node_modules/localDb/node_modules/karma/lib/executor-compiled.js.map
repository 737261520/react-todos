{"version":3,"sources":["executor.js"],"names":[],"mappings":";;AAAA,IAAI,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,CAAC;;AAEvC,IAAI,QAAQ,GAAG,SAAX,QAAQ,CAAY,gBAAgB,EAAE,MAAM,EAAE,OAAO,EAAE;AACzD,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,MAAI,kBAAkB,GAAG,KAAK,CAAC;AAC/B,MAAI,YAAY,GAAG,CAAC,CAAC;AACrB,MAAI,eAAe,CAAC;;AAEpB,MAAI,QAAQ,GAAG,SAAX,QAAQ,GAAc;AACxB,QAAI,QAAQ,GAAG,EAAE,CAAC;;AAElB,QAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE;AAC5B,SAAG,CAAC,IAAI,CAAC,0CAA0C,EAAE,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,EAC7E,MAAM,CAAC,OAAO,CAAC,CAAC;AACpB,aAAO,KAAK,CAAC;KACd;;AAED,QAAI,gBAAgB,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE;AAC1C,SAAG,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;AAC/C,wBAAkB,GAAG,KAAK,CAAC;AAC3B,sBAAgB,CAAC,YAAY,EAAE,CAAC;AAChC,sBAAgB,CAAC,iBAAiB,EAAE,CAAC;AACrC,kBAAY,GAAG,gBAAgB,CAAC,MAAM,CAAC;AACvC,qBAAe,GAAG,gBAAgB,CAAC,KAAK,EAAE,CAAC;AAC3C,aAAO,CAAC,IAAI,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;AAC3C,UAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;AACpD,aAAO,IAAI,CAAC;KACb;;AAED,OAAG,CAAC,IAAI,CAAC,oDAAoD,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACrF,sBAAkB,GAAG,IAAI,CAAC;AAC1B,WAAO,KAAK,CAAC;GACd,CAAC;;AAEF,MAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;;AAEzB,MAAI,CAAC,aAAa,GAAG,YAAW;AAC9B,QAAI,kBAAkB,EAAE;AACtB,cAAQ,EAAE,CAAC;KACZ;GACF,CAAC;;AAEF,MAAI,CAAC,iBAAiB,GAAG,YAAW;AAClC,gBAAY,EAAE,CAAC;;AAEf,QAAI,CAAC,YAAY,EAAE;AACjB,aAAO,CAAC,IAAI,CAAC,cAAc,EAAE,eAAe,EAAE,eAAe,CAAC,UAAU,EAAE,CAAC,CAAC;KAC7E;GACF,CAAC;;;AAGF,SAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CACpB,CAAC;;AAGF,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC","file":"executor-compiled.js","sourcesContent":["var log = require('./logger').create();\n\nvar Executor = function(capturedBrowsers, config, emitter) {\n  var self = this;\n  var executionScheduled = false;\n  var pendingCount = 0;\n  var runningBrowsers;\n\n  var schedule = function() {\n    var nonReady = [];\n\n    if (!capturedBrowsers.length) {\n      log.warn('No captured browser, open http://%s:%s%s', config.hostname, config.port,\n          config.urlRoot);\n      return false;\n    }\n\n    if (capturedBrowsers.areAllReady(nonReady)) {\n      log.debug('All browsers are ready, executing');\n      executionScheduled = false;\n      capturedBrowsers.clearResults();\n      capturedBrowsers.setAllToExecuting();\n      pendingCount = capturedBrowsers.length;\n      runningBrowsers = capturedBrowsers.clone();\n      emitter.emit('run_start', runningBrowsers);\n      self.socketIoSockets.emit('execute', config.client);\n      return true;\n    }\n\n    log.info('Delaying execution, these browsers are not ready: ' + nonReady.join(', '));\n    executionScheduled = true;\n    return false;\n  };\n\n  this.schedule = schedule;\n\n  this.onRunComplete = function() {\n    if (executionScheduled) {\n      schedule();\n    }\n  };\n\n  this.onBrowserComplete = function() {\n    pendingCount--;\n\n    if (!pendingCount) {\n      emitter.emit('run_complete', runningBrowsers, runningBrowsers.getResults());\n    }\n  };\n\n  // bind all the events\n  emitter.bind(this);\n};\n\n\nmodule.exports = Executor;\n"]}