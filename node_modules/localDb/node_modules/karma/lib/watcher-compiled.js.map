{"version":3,"sources":["watcher.js"],"names":[],"mappings":"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","file":"watcher-compiled.js","sourcesContent":["var chokidar = require('chokidar');\nvar mm = require('minimatch');\n\nvar helper = require('./helper');\nvar log = require('./logger').create('watcher');\n\nvar DIR_SEP = require('path').sep;\n\n// Get parent folder, that be watched (does not contain any special globbing character)\nvar baseDirFromPattern = function(pattern) {\n  return pattern.replace(/[\\/\\\\][^\\/\\\\]*\\*.*$/, '')           // remove parts with *\n                .replace(/[\\/\\\\][^\\/\\\\]*[\\!\\+]\\(.*$/, '')     // remove parts with !(...) and +(...)\n                .replace(/[\\/\\\\][^\\/\\\\]*\\)\\?.*$/, '') || DIR_SEP; // remove parts with (...)?\n};\n\nvar watchPatterns = function(patterns, watcher) {\n  // filter only unique non url patterns paths\n  var pathsToWatch = [];\n  var uniqueMap = {};\n  var path;\n\n  patterns.forEach(function(pattern) {\n    path = baseDirFromPattern(pattern);\n    if (!uniqueMap[path]) {\n      uniqueMap[path] = true;\n      pathsToWatch.push(path);\n    }\n  });\n\n  // watch only common parents, no sub paths\n  pathsToWatch.forEach(function(path) {\n    if (!pathsToWatch.some(function(p) {\n      return p !== path && path.substr(0, p.length + 1) === p + DIR_SEP;\n    })) {\n      watcher.add(path);\n      log.debug('Watching \"%s\"', path);\n    }\n  });\n};\n\n// Function to test if a path should be ignored by chokidar.\nvar createIgnore = function(patterns, excludes) {\n  return function(path, stat) {\n    if (!stat || stat.isDirectory()) {\n      return false;\n    }\n\n    // Check if the path matches any of the watched patterns.\n    if (!patterns.some(function(pattern) {\n      return mm(path, pattern, {dot: true});\n    })) {\n      return true;\n    }\n\n    // Check if the path matches any of the exclude patterns.\n    if (excludes.some(function(pattern) {\n      return mm(path, pattern, {dot: true});\n    })) {\n      return true;\n    }\n\n    return false;\n  };\n};\n\nvar onlyWatchedTrue = function(pattern) {\n  return pattern.watched;\n};\n\nvar getWatchedPatterns = function(patternObjects) {\n  return patternObjects.filter(onlyWatchedTrue).map(function(patternObject) {\n    return patternObject.pattern;\n  });\n};\n\nexports.watch = function(patterns, excludes, fileList, usePolling, emitter) {\n  var watchedPatterns = getWatchedPatterns(patterns);\n  var options = {\n    usePolling: usePolling,\n    ignorePermissionErrors: true,\n    ignoreInitial: true,\n    ignored: createIgnore(watchedPatterns, excludes)\n  };\n  var chokidarWatcher = new chokidar.FSWatcher(options);\n\n  watchPatterns(watchedPatterns, chokidarWatcher);\n\n  var bind = function(fn) {\n    return function(path) {\n      return fn.call(fileList, helper.normalizeWinPath(path));\n    };\n  };\n\n  // register events\n  chokidarWatcher.on('add', bind(fileList.addFile))\n                 .on('change', bind(fileList.changeFile))\n                 .on('unlink', bind(fileList.removeFile))\n                 // If we don't subscribe; unhandled errors from Chokidar will bring Karma down\n                 // (see GH Issue #959)\n                 .on('error', function(e) {\n                    log.debug(e);\n                  });\n\n  emitter.on('exit', function(done) {\n    chokidarWatcher.close();\n    done();\n  });\n\n  return chokidarWatcher;\n};\n\nexports.watch.$inject = ['config.files', 'config.exclude', 'fileList', 'config.usePolling',\n  'emitter'];\n"]}