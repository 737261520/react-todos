{"version":3,"sources":["source_files.js"],"names":[],"mappings":";;;;;;AAIA,IAAI,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACzC,IAAI,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACjC,IAAI,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC;;AAG3C,IAAI,UAAU,GAAG,SAAb,UAAU,CAAY,KAAK,EAAE,IAAI,EAAE;AACrC,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,QAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,EAAE;AAC1B,aAAO,KAAK,CAAC,CAAC,CAAC,CAAC;KACjB;GACF;;AAED,SAAO,IAAI,CAAC;CACb,CAAC;;AAGF,IAAI,2BAA2B,GAAG,SAA9B,2BAA2B,CAAY,YAAY,EAAE,SAAS;qBACxC,QAAQ,EAAE;;AAElC,SAAO,UAAS,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;;AAEvC,QAAI,iBAAiB,GAAG,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CACpD,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CACpB,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAC1B,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;;;;;AAKlC,QAAI,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;;AAEnC,WAAO,YAAY,CAAC,IAAI,CAAC,UAAS,KAAK,EAAE;;AAEvC,UAAI,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;;AAEvD,UAAI,IAAI,EAAE;AACR,iBAAS,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,YAAW;AAC5D,cAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;;AAE7B,kBAAM,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;WACvC,MAAM;;AAEL,kBAAM,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;WACpC;SACF,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;OAClB,MAAM;AACL,YAAI,EAAE,CAAC;OACR;;AAED,mBAAa,CAAC,MAAM,EAAE,CAAC;KACxB,CAAC,CAAC;GACJ,CAAC;CACH,CAAC;;AAEF,2BAA2B,CAAC,OAAO,GAAG,CAAC,cAAc,EAAE,WAAW,EAAE,iBAAiB,CAAC,CAAC;;;AAIvF,OAAO,CAAC,MAAM,GAAG,2BAA2B,CAAC","file":"source_files-compiled.js","sourcesContent":["/**\n * Source Files middleware is responsible for serving all the source files under the test.\n */\n\nvar querystring = require('querystring');\nvar common = require('./common');\nvar pause = require('connect').utils.pause;\n\n\nvar findByPath = function(files, path) {\n  for (var i = 0; i < files.length; i++) {\n    if (files[i].path === path) {\n      return files[i];\n    }\n  }\n\n  return null;\n};\n\n\nvar createSourceFilesMiddleware = function(filesPromise, serveFile,\n    /* config.basePath */ basePath) {\n\n  return function(request, response, next) {\n    // TODO(vojta): serve files under urlRoot (also update the formatError)\n    var requestedFilePath = querystring.unescape(request.url)\n        .replace(/\\?.*$/, '')\n        .replace(/^\\/absolute/, '')\n        .replace(/^\\/base/, basePath);\n\n    // Need to pause the request because of proxying, see:\n    // https://groups.google.com/forum/#!topic/q-continuum/xr8znxc_K5E/discussion\n    // TODO(vojta): remove once we don't care about Node 0.8\n    var pausedRequest = pause(request);\n\n    return filesPromise.then(function(files) {\n      // TODO(vojta): change served to be a map rather then an array\n      var file = findByPath(files.served, requestedFilePath);\n\n      if (file) {\n        serveFile(file.contentPath || file.path, response, function() {\n          if (/\\?\\w+/.test(request.url)) {\n            // files with timestamps - cache one year, rely on timestamps\n            common.setHeavyCacheHeaders(response);\n          } else {\n            // without timestamps - no cache (debug)\n            common.setNoCacheHeaders(response);\n          }\n        }, file.content);\n      } else {\n        next();\n      }\n\n      pausedRequest.resume();\n    });\n  };\n};\n\ncreateSourceFilesMiddleware.$inject = ['filesPromise', 'serveFile', 'config.basePath'];\n\n\n// PUBLIC API\nexports.create = createSourceFilesMiddleware;\n"]}