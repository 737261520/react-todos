{"version":3,"sources":["state_machine.js"],"names":[],"mappings":"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","file":"state_machine-compiled.js","sourcesContent":["var util = require('util');\nvar EventEmitter = require('events').EventEmitter;\n\nvar StateMachine = function(rli, colors) {\n  var questions;\n  var currentQuestion;\n  var answers;\n  var currentOptions;\n  var currentOptionsPointer;\n  var currentQuestionId;\n  var done;\n\n  EventEmitter.call(this);\n\n  var showPrompt = function() {\n    rli.write(colors.ANSWER);\n    rli.prompt();\n  };\n\n  this.onKeypress = function(key) {\n    if (!currentOptions || !key) {\n      return;\n    }\n\n    if (key.name === 'tab' || key.name === 'right' || key.name === 'down') {\n      this.suggestNextOption();\n    } else if (key.name === 'left' || key.name === 'up') {\n      currentOptionsPointer = currentOptionsPointer + currentOptions.length - 2;\n      this.suggestNextOption();\n    }\n\n    if (!key.ctrl && !key.meta && key.name !== 'enter' && key.name !== 'return') {\n      key.name = 'escape';\n    }\n  };\n\n  this.suggestNextOption = function() {\n    if (!currentOptions) {\n      return;\n    }\n\n    currentOptionsPointer = (currentOptionsPointer + 1) % currentOptions.length;\n    rli._deleteLineLeft();\n    rli._deleteLineRight();\n    rli.write(currentOptions[currentOptionsPointer]);\n  };\n\n  this.kill = function() {\n    currentOptions = null;\n    currentQuestionId = null;\n    rli.write('\\n' + colors.RESET + '\\n');\n    rli.close();\n  };\n\n\n  this.onLine = function(line) {\n    if (currentQuestionId) {\n      rli.write(colors.RESET);\n      line = line.trim().replace(colors.ANSWER, '').replace(colors.RESET, '');\n\n      if (currentOptions) {\n        currentOptionsPointer = currentOptions.indexOf(line);\n        if (currentOptionsPointer === -1) {\n          return;\n        }\n      }\n\n      if (line === '') {\n        line = null;\n      }\n\n      if (currentQuestion.boolean) {\n        line = (line === 'yes' || line === 'true' || line === 'on');\n      }\n\n      if (line !== null && currentQuestion.validate) {\n        currentQuestion.validate(line);\n      }\n\n      if (currentQuestion.multiple) {\n        answers[currentQuestionId] = answers[currentQuestionId] || [];\n        if (line !== null) {\n          answers[currentQuestionId].push(line);\n          showPrompt();\n\n          if (currentOptions) {\n            currentOptions.splice(currentOptionsPointer, 1);\n            currentOptionsPointer = -1;\n          }\n        } else {\n          this.nextQuestion();\n        }\n      } else {\n        answers[currentQuestionId] = line;\n        this.nextQuestion();\n      }\n    }\n  };\n\n  this.nextQuestion = function() {\n    currentQuestion = questions.shift();\n\n    while (currentQuestion && currentQuestion.condition && !currentQuestion.condition(answers)) {\n      currentQuestion = questions.shift();\n    }\n\n    this.emit('next_question', currentQuestion);\n\n    if (currentQuestion) {\n      currentQuestionId = null;\n\n      rli.write('\\n' + colors.question(currentQuestion.question) + '\\n');\n      rli.write(currentQuestion.hint + '\\n');\n      showPrompt();\n\n      currentOptions = currentQuestion.options || null;\n      currentOptionsPointer = -1;\n      currentQuestionId = currentQuestion.id;\n\n      this.suggestNextOption();\n    } else {\n      currentQuestionId = null;\n      currentOptions = null;\n\n      // end\n      this.kill();\n      done(answers);\n    }\n  };\n\n  this.process = function(_questions, _done) {\n    questions = _questions;\n    answers = {};\n    done = _done;\n\n    this.nextQuestion();\n  };\n};\n\nutil.inherits(StateMachine, EventEmitter);\n\n\nmodule.exports = StateMachine;\n"]}